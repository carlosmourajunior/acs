import { DevicesAPI } from '../services/api';

/**
 * Exemplo de uso das fun√ß√µes de auto-refresh do sistema
 * Este arquivo demonstra como usar as APIs programaticamente
 */

// Exemplo 1: Atualizar todos os dispositivos manualmente
export const manualRefreshAllDevices = async () => {
  try {
    console.log('üîÑ Iniciando atualiza√ß√£o manual de todos os dispositivos...');
    
    const result = await DevicesAPI.refreshAllDevices();
    
    console.log('‚úÖ Resultado da atualiza√ß√£o:', {
      totalDevices: result.data.totalDevices,
      successful: result.data.successCount,
      failed: result.data.failureCount
    });
    
    return result.data;
  } catch (error) {
    console.error('‚ùå Erro na atualiza√ß√£o manual:', error);
    throw error;
  }
};

// Exemplo 2: For√ßar conex√£o apenas de dispositivos offline
export const forceReconnectOfflineDevices = async () => {
  try {
    console.log('üîå For√ßando reconex√£o de dispositivos offline...');
    
    const result = await DevicesAPI.forceConnectionAllOffline();
    
    console.log('‚úÖ Resultado da reconex√£o:', {
      totalDevices: result.data.totalDevices,
      offlineDevices: result.data.offlineDevices,
      reconnectionAttempts: result.data.successCount,
      failed: result.data.failureCount
    });
    
    return result.data;
  } catch (error) {
    console.error('‚ùå Erro na reconex√£o:', error);
    throw error;
  }
};

// Exemplo 3: Verificar conectividade de um dispositivo espec√≠fico
export const checkSpecificDeviceConnectivity = async (deviceId: string) => {
  try {
    console.log(`üîç Verificando conectividade do dispositivo ${deviceId}...`);
    
    const result = await DevicesAPI.checkDeviceConnectivity(deviceId);
    
    console.log('üìä Status de conectividade:', {
      deviceId,
      isOnline: result.data.isOnline,
      lastInform: result.data.lastInformFormatted,
      timeSinceLastInform: `${Math.round(result.data.lastInformAgo / 60000)} minutos`
    });
    
    return result.data;
  } catch (error) {
    console.error('‚ùå Erro ao verificar conectividade:', error);
    throw error;
  }
};

// Exemplo 4: Atualizar um dispositivo espec√≠fico
export const refreshSpecificDevice = async (deviceId: string) => {
  try {
    console.log(`üîÑ Atualizando dispositivo espec√≠fico ${deviceId}...`);
    
    const result = await DevicesAPI.refreshDeviceStatus(deviceId);
    
    console.log('‚úÖ Dispositivo atualizado com sucesso');
    
    return result;
  } catch (error) {
    console.error('‚ùå Erro ao atualizar dispositivo:', error);
    throw error;
  }
};

// Exemplo 5: For√ßar conex√£o de um dispositivo espec√≠fico
export const forceSpecificDeviceConnection = async (deviceId: string) => {
  try {
    console.log(`üîå For√ßando conex√£o do dispositivo ${deviceId}...`);
    
    const result = await DevicesAPI.forceConnection(deviceId);
    
    console.log('‚úÖ Solicita√ß√£o de conex√£o enviada');
    
    return result;
  } catch (error) {
    console.error('‚ùå Erro ao for√ßar conex√£o:', error);
    throw error;
  }
};

// Exemplo 6: Opera√ß√£o completa de refresh (recomendado para uso em produ√ß√£o)
export const performCompleteRefresh = async () => {
  console.log('üöÄ Iniciando opera√ß√£o completa de refresh...');
  
  const results = {
    refreshAll: null as any,
    forceConnection: null as any,
    errors: [] as string[]
  };
  
  try {
    // Passo 1: Atualizar informa√ß√µes de todos os dispositivos
    console.log('üì° Passo 1: Atualizando informa√ß√µes dos dispositivos...');
    results.refreshAll = await DevicesAPI.refreshAllDevices();
    console.log(`‚úÖ Passo 1 conclu√≠do: ${results.refreshAll.data.successCount}/${results.refreshAll.data.totalDevices} dispositivos atualizados`);
    
    // Aguardar um pouco antes do pr√≥ximo passo
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Passo 2: For√ßar conex√£o de dispositivos offline
    console.log('üîå Passo 2: For√ßando reconex√£o de dispositivos offline...');
    results.forceConnection = await DevicesAPI.forceConnectionAllOffline();
    console.log(`‚úÖ Passo 2 conclu√≠do: ${results.forceConnection.data.successCount}/${results.forceConnection.data.offlineDevices} tentativas de reconex√£o enviadas`);
    
  } catch (error) {
    const errorMsg = `Erro durante refresh completo: ${error}`;
    console.error('‚ùå', errorMsg);
    results.errors.push(errorMsg);
  }
  
  console.log('üèÅ Opera√ß√£o completa de refresh finalizada:', results);
  return results;
};

// Exemplo 7: Monitorar tasks de um dispositivo
export const monitorDeviceTasks = async (deviceId: string) => {
  try {
    console.log(`üìã Monitorando tasks do dispositivo ${deviceId}...`);
    
    const result = await DevicesAPI.getDeviceTasks(deviceId);
    
    console.log('üìä Tasks encontradas:', {
      deviceId,
      totalTasks: result.data.length,
      tasks: result.data.map((task: any) => ({
        id: task._id,
        name: task.name,
        timestamp: task.timestamp
      }))
    });
    
    return result.data;
  } catch (error) {
    console.error('‚ùå Erro ao monitorar tasks:', error);
    throw error;
  }
};

// Exemplo 8: Implementar retry autom√°tico para dispositivos que falharam
export const retryFailedDevices = async (failedDeviceIds: string[]) => {
  console.log(`üîÑ Tentando novamente dispositivos que falharam: ${failedDeviceIds.length} dispositivos`);
  
  const retryResults = [];
  
  for (const deviceId of failedDeviceIds) {
    try {
      console.log(`üîÑ Tentativa de retry para dispositivo ${deviceId}...`);
      
      // Primeiro tenta for√ßar conex√£o
      await DevicesAPI.forceConnection(deviceId);
      
      // Aguarda um pouco
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Depois tenta atualizar
      await DevicesAPI.refreshDeviceStatus(deviceId);
      
      retryResults.push({ deviceId, success: true });
      console.log(`‚úÖ Retry bem-sucedido para ${deviceId}`);
      
    } catch (error) {
      retryResults.push({ deviceId, success: false, error: (error instanceof Error ? error.message : String(error)) });
      console.error(`‚ùå Retry falhou para ${deviceId}:`, error);
    }
  }
  
  const successCount = retryResults.filter(r => r.success).length;
  console.log(`üèÅ Retry conclu√≠do: ${successCount}/${failedDeviceIds.length} dispositivos recuperados`);
  
  return retryResults;
};

export default {
  manualRefreshAllDevices,
  forceReconnectOfflineDevices,
  checkSpecificDeviceConnectivity,
  refreshSpecificDevice,
  forceSpecificDeviceConnection,
  performCompleteRefresh,
  monitorDeviceTasks,
  retryFailedDevices
};
